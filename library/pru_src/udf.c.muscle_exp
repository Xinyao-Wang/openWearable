#include "udf.h"

// Include sensor/actuator/algorithmic modules here
#include "pam.h"
#include "sync.h"

// Define resources
volatile register uint32_t __R30;
volatile register uint32_t __R31;
pam_t* pam;
sync_t* sync;

// Pam constants
const uint8_t div = 1;
const fix16_t threshold = FIX16_1;

// Exp vars/constants
int32_t flag = 0;
int32_t t = 0;
int32_t t_start = 0;
int32_t t_step = 4000;
const int32_t n = 20;
const int32_t  p_0 = 5;


// ---------------------------------------------------------------------------
// PRU0
//
// Edit user defined functions below
// ---------------------------------------------------------------------------
void Pru0Init(pru_mem_t* mem) {
}

void Pru0UpdateState(const pru_count_t* c,
                     const param_mem_t* p_,
                     state_t* s_,
                     pru_ctl_t* ctl_) {
}

void Pru0UpdateControl(const pru_count_t* c,
                       const param_mem_t* p_,
                       state_t* s_,
                       pru_ctl_t* ctl_){
}

void Pru0Cleanup(void) {
}

// ---------------------------------------------------------------------------
// PRU1
//
// Edit user defined functions below
// ---------------------------------------------------------------------------
void Pru1Init(pru_mem_t* mem) {
  pam = PamInitMuscle(SENSOR_ADD, MUX_SEL, 0, EXT_V_HP, EXT_V_LP, div,
                      threshold);
  sync = SyncInitChan(0x7);
  SyncOutLow(sync);
}

void Pru1UpdateState(const pru_count_t* c,
                     const param_mem_t* p_,
                     state_t* s_,
                     pru_ctl_t* ctl_) {
}

void Pru1UpdateControl(const pru_count_t* c,
                       const param_mem_t* p_,
                       state_t* s_,
                       pru_ctl_t* ctl_) {

  s_->p_d = fix16_from_int(0);
  if (ctl_->bit.utility == 1) {
    if (flag == 0) {
      flag = 1;
      t_start = c->frame;
      SyncOutHigh(sync);
    }
    t = c->frame - t_start;

    if (t < ((n+1)*t_step)) {
      s_->p_d = fix16_from_int(p_0*(t/t_step));
    } else {
      s_->p_d = fix16_from_int(p_0*(t/t_step) - 2*p_0*((t/t_step)-n));
    }

    if (t == ((2*n + 1)*t_step)) {
      flag = 0;
      ctl_->bit.utility = 0;
      SyncOutLow(sync);
    }
  }
  PamSamplePressure(pam, &s_->p_m);
  s_->sync_val = SyncOutState(sync);
  PamUpdateControl(pam, &s_->p_m, &s_->p_d, &s_->u);
}

void Pru1Cleanup(void) {
  PamFreeMuscle(pam);
  SyncFreeChan(sync);
}

// ---------------------------------------------------------------------------
// Added helper functions as needed
// ---------------------------------------------------------------------------
